#!/bin/bash
set -e

echo "🔧 Fixing Gantt chart page implementation..."

# First add the route properly to app.py
echo "Adding test/gantt route to app.py..."

ROUTE_CODE=$(cat <<'ROUTE_EOF'
@app.route('/test/gantt')
def test_gantt():
    return render_template('test/gantt.html')
ROUTE_EOF
)

# Check if the route already exists
if grep -q "def test_gantt():" backend/app.py; then
  echo "Route exists, but may not be working correctly. Rebuilding route..."
  # Create backup
  cp backend/app.py backend/app.py.bak
  
  # Remove existing route if present
  sed -i '/^@app.route.*test\/gantt.*/,/^def test_gantt():/d' backend/app.py
fi

# Insert the route just before if __name__ == "__main__"
sed -i "/if __name__ == \"__main__\"/i\\
$ROUTE_CODE\\
" backend/app.py

# Create required directories
mkdir -p frontend/templates/test
mkdir -p frontend/static/js/test
mkdir -p frontend/static/css/test

# Create the simple CSS-based implementation first
cat << 'EOF' > frontend/templates/test/gantt.html
<!DOCTYPE html>
<html>
<head>
  <title>Costume Scheduler - Gantt Chart</title>
  <link rel="stylesheet" href="/static/css/styles.css">
  <link rel="stylesheet" href="/static/css/test/gantt.css">
  <style>
    /* Inline styles for fallback */
    body { font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }
    .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
    .view-selector { display: flex; gap: 10px; }
    .view-button { padding: 8px 16px; background-color: #f0f0f0; border: 1px solid #ddd; cursor: pointer; }
    .view-button.active { background-color: #4CAF50; color: white; }
    .container { margin-top: 20px; }
    #date-selector { padding: 8px; font-size: 16px; }
    .gantt-container, .list-container, .wardrobe-container { display: none; margin-top: 20px; }
    .active-view { display: block; }
    
    /* List view styles */
    .schedule-item { 
      background-color: #4CAF50; 
      color: white; 
      padding: 10px; 
      margin: 5px 0; 
      border-radius: 4px;
      display: flex;
      justify-content: space-between;
    }
    
    /* Gantt chart styles */
    .timeline-container { 
      position: relative;
      margin-top: 30px;
      border-left: 1px solid #ccc;
      padding-top: 30px;
    }
    .timeline-header {
      display: flex;
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
    }
    .timeline-hour {
      flex: 1;
      text-align: center;
      font-weight: bold;
      border-right: 1px solid #eee;
    }
    .timeline-row {
      position: relative;
      height: 50px;
      margin-bottom: 10px;
      border-bottom: 1px solid #eee;
    }
    .timeline-row-label {
      position: absolute;
      left: -120px;
      width: 110px;
      text-align: right;
      padding-right: 10px;
      font-weight: bold;
    }
    .timeline-bar {
      position: absolute;
      height: 30px;
      top: 10px;
      background-color: #3498db;
      border-radius: 4px;
      color: white;
      padding: 5px;
      font-size: 12px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      box-sizing: border-box;
    }
    
    /* Wardrobe styles */
    .wardrobe-item {
      border: 1px solid #ddd;
      padding: 10px;
      margin-bottom: 10px;
      border-radius: 4px;
    }
    .wardrobe-search {
      width: 100%;
      padding: 10px;
      margin-bottom: 15px;
      font-size: 16px;
    }
    
    /* Status indicators */
    .status-available { color: green; }
    .status-in-use { color: blue; }
    .status-cleaning { color: orange; }
    
    /* Table styles */
    table { width: 100%; border-collapse: collapse; }
    th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
    th { background-color: #f2f2f2; }
  </style>
</head>
<body>
  <div class="header">
    <h1>Costume Scheduler</h1>
    <div class="view-selector">
      <button class="view-button active" data-view="gantt">Gantt Chart</button>
      <button class="view-button" data-view="list">List View</button>
      <button class="view-button" data-view="wardrobe">Wardrobe</button>
    </div>
  </div>
  
  <div class="date-selector-container">
    <label for="date-selector">Select Date: </label>
    <input type="date" id="date-selector">
    <button id="refresh-button">Refresh</button>
  </div>
  
  <div class="container">
    <!-- Gantt Chart View -->
    <div id="gantt-view" class="gantt-container active-view">
      <h2>Costume Change Schedule - Gantt Chart</h2>
      <div id="timeline" class="timeline-container">
        <!-- Timeline will be generated by JavaScript -->
      </div>
    </div>
    
    <!-- List View -->
    <div id="list-view" class="list-container">
      <h2>Costume Change Schedule - List</h2>
      <div id="schedule-list">
        <!-- List will be generated by JavaScript -->
      </div>
    </div>
    
    <!-- Wardrobe View -->
    <div id="wardrobe-view" class="wardrobe-container">
      <h2>Wardrobe Inventory</h2>
      <input type="text" id="wardrobe-search" class="wardrobe-search" placeholder="Search wardrobe items...">
      <div id="wardrobe-list">
        <!-- Wardrobe items will be generated by JavaScript -->
      </div>
    </div>
  </div>
  
  <script src="/static/js/test/gantt.js"></script>
</body>
</html>
EOF

# Create the CSS file
cat << 'EOF' > frontend/static/css/test/gantt.css
/* Main layout */
body {
  font-family: Arial, sans-serif;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.view-selector {
  display: flex;
  gap: 10px;
}

.view-button {
  padding: 8px 16px;
  background-color: #f0f0f0;
  border: 1px solid #ddd;
  cursor: pointer;
  border-radius: 4px;
  transition: all 0.3s;
}

.view-button:hover {
  background-color: #e0e0e0;
}

.view-button.active {
  background-color: #4CAF50;
  color: white;
}

.container {
  margin-top: 20px;
}

.date-selector-container {
  margin-bottom: 20px;
  padding: 10px;
  background-color: #f9f9f9;
  border-radius: 4px;
}

#date-selector {
  padding: 8px;
  font-size: 16px;
  border-radius: 4px;
  border: 1px solid #ddd;
}

#refresh-button {
  padding: 8px 16px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-left: 10px;
}

/* View containers */
.gantt-container, .list-container, .wardrobe-container {
  display: none;
  margin-top: 20px;
  padding: 15px;
  border: 1px solid #ddd;
  border-radius: 4px;
  background-color: #fff;
}

.active-view {
  display: block;
}

/* List view */
.schedule-item {
  background-color: #4CAF50;
  color: white;
  padding: 15px;
  margin: 8px 0;
  border-radius: 4px;
  display: flex;
  justify-content: space-between;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.schedule-time {
  font-weight: bold;
}

.schedule-actor {
  font-weight: bold;
}

.schedule-dresser {
  font-style: italic;
}

/* Gantt chart */
.timeline-container {
  position: relative;
  margin-top: 40px;
  margin-left: 120px;
  border-left: 1px solid #ccc;
  padding-top: 40px;
  overflow-x: auto;
}

.timeline-header {
  display: flex;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
}

.timeline-hour {
  width: 60px;
  text-align: center;
  font-weight: bold;
  border-right: 1px solid #eee;
}

.timeline-row {
  position: relative;
  height: 50px;
  margin-bottom: 10px;
  border-bottom: 1px solid #eee;
}

.timeline-row-label {
  position: absolute;
  left: -120px;
  width: 110px;
  text-align: right;
  padding-right: 10px;
  font-weight: bold;
}

.timeline-bar {
  position: absolute;
  height: 30px;
  top: 10px;
  background-color: #3498db;
  border-radius: 4px;
  color: white;
  padding: 5px;
  font-size: 12px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  box-sizing: border-box;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Dresser colors */
.timeline-bar[data-dresser="Dana"] { background-color: #3498db; }
.timeline-bar[data-dresser="Eli"] { background-color: #e74c3c; }
.timeline-bar[data-dresser="Fiona"] { background-color: #9b59b6; }

/* Wardrobe */
.wardrobe-item {
  border: 1px solid #ddd;
  padding: 15px;
  margin-bottom: 15px;
  border-radius: 4px;
  background-color: #f9f9f9;
}

.wardrobe-search {
  width: 100%;
  padding: 12px;
  margin-bottom: 20px;
  font-size: 16px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.wardrobe-item h3 {
  margin-top: 0;
  color: #333;
}

.wardrobe-details {
  display: flex;
  justify-content: space-between;
}

/* Status indicators */
.status-available { color: green; }
.status-in-use { color: blue; }
.status-cleaning { color: orange; }
EOF

# Create the JavaScript file for both implementations
cat << 'EOF' > frontend/static/js/test/gantt.js
document.addEventListener('DOMContentLoaded', function() {
  // Set date selector to today
  const dateSelector = document.getElementById('date-selector');
  const today = new Date().toISOString().split('T')[0];
  dateSelector.value = today;
  
  // Setup view switching
  const viewButtons = document.querySelectorAll('.view-button');
  const viewContainers = document.querySelectorAll('.gantt-container, .list-container, .wardrobe-container');
  
  viewButtons.forEach(button => {
    button.addEventListener('click', function() {
      const viewName = this.getAttribute('data-view');
      
      // Update active button
      viewButtons.forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      
      // Update active view
      viewContainers.forEach(container => container.classList.remove('active-view'));
      document.getElementById(`${viewName}-view`).classList.add('active-view');
    });
  });
  
  // Setup refresh button
  document.getElementById('refresh-button').addEventListener('click', function() {
    fetchAndRenderData();
  });
  
  // Setup wardrobe search
  document.getElementById('wardrobe-search').addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase();
    const items = document.querySelectorAll('.wardrobe-item');
    
    items.forEach(item => {
      const text = item.textContent.toLowerCase();
      item.style.display = text.includes(searchTerm) ? 'block' : 'none';
    });
  });
  
  // Initial data load
  fetchAndRenderData();
});

// Fetch data from API and render views
function fetchAndRenderData() {
  fetch('/api/data')
    .then(response => response.json())
    .then(data => {
      const selectedDate = document.getElementById('date-selector').value;
      
      renderGanttChart(data, selectedDate);
      renderListView(data, selectedDate);
      renderWardrobeInventory(data.wardrobe_items);
    })
    .catch(error => {
      console.error('Error fetching data:', error);
      document.getElementById('timeline').innerHTML = '<p>Error loading data. Please check console.</p>';
    });
}

// Render the Gantt chart view
function renderGanttChart(data, selectedDate) {
  const container = document.getElementById('timeline');
  container.innerHTML = '';
  
  const schedules = data.schedules || [];
  const filtered = schedules.filter(entry => entry.time.startsWith(selectedDate));
  
  if (filtered.length === 0) {
    container.innerHTML = '<p>No schedule entries found for the selected date.</p>';
    return;
  }
  
  // Determine time range
  const times = filtered.map(entry => new Date(entry.time));
  const startTime = new Date(Math.min(...times));
  const endTime = new Date(Math.max(...times));
  endTime.setMinutes(endTime.getMinutes() + 60); // Add buffer
  
  startTime.setMinutes(0); // Round to hour
  endTime.setHours(endTime.getHours() + 1);
  endTime.setMinutes(0);
  
  // Create timeline header
  const header = document.createElement('div');
  header.className = 'timeline-header';
  
  for (let hour = startTime.getHours(); hour <= endTime.getHours(); hour++) {
    const hourElement = document.createElement('div');
    hourElement.className = 'timeline-hour';
    hourElement.textContent = `${hour}:00`;
    header.appendChild(hourElement);
  }
  
  container.appendChild(header);
  
  // Get unique actors for rows
  const actors = [...new Set(filtered.map(entry => entry.actor))];
  
  // Create timeline rows
  actors.forEach(actor => {
    const actorItems = filtered.filter(entry => entry.actor === actor);
    
    const row = document.createElement('div');
    row.className = 'timeline-row';
    
    const label = document.createElement('div');
    label.className = 'timeline-row-label';
    label.textContent = actor;
    row.appendChild(label);
    
    actorItems.forEach(item => {
      const startDateTime = new Date(item.time);
      const endDateTime = new Date(startDateTime.getTime() + (item.duration_minutes * 60000));
      
      // Calculate position and width
      const startTime = startDateTime.getHours() * 60 + startDateTime.getMinutes();
      const endTime = endDateTime.getHours() * 60 + endDateTime.getMinutes();
      const dayStart = startTime.getHours() * 60;
      
      const pixelsPerMinute = 1;
      const leftPosition = (startTime - dayStart) * pixelsPerMinute;
      const width = (endTime - startTime) * pixelsPerMinute;
      
      const bar = document.createElement('div');
      bar.className = 'timeline-bar';
      bar.setAttribute('data-dresser', item.dresser);
      bar.style.left = `${leftPosition}px`;
      bar.style.width = `${width}px`;
      bar.textContent = `${item.item} (${item.dresser})`;
      
      row.appendChild(bar);
    });
    
    container.appendChild(row);
  });
}

// Render list view
function renderListView(data, selectedDate) {
  const container = document.getElementById('schedule-list');
  container.innerHTML = '';
  
  const schedules = data.schedules || [];
  const filtered = schedules.filter(entry => entry.time.startsWith(selectedDate));
  
  if (filtered.length === 0) {
    container.innerHTML = '<p>No schedule entries found for the selected date.</p>';
    return;
  }
  
  // Sort by time
  filtered.sort((a, b) => new Date(a.time) - new Date(b.time));
  
  // Create list view
  filtered.forEach(entry => {
    const item = document.createElement('div');
    item.className = 'schedule-item';
    
    const time = new Date(entry.time);
    const timeStr = time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    
    item.innerHTML = `
      <span class="schedule-time">${timeStr} (${entry.duration_minutes} min)</span>
      <span class="schedule-actor">${entry.actor}</span>
      <span class="schedule-item">${entry.item}</span>
      <span class="schedule-dresser">${entry.dresser}</span>
    `;
    
    container.appendChild(item);
  });
}

// Render wardrobe inventory
function renderWardrobeInventory(items) {
  const container = document.getElementById('wardrobe-list');
  container.innerHTML = '';
  
  if (!items || items.length === 0) {
    container.innerHTML = '<p>No wardrobe items found.</p>';
    return;
  }
  
  // Create a table for wardrobe items
  const table = document.createElement('table');
  table.innerHTML = `
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Size</th>
        <th>Status</th>
      </tr>
    </thead>
    <tbody>
      ${items.map(item => `
        <tr class="wardrobe-item">
          <td>${item.id || ''}</td>
          <td>${item.name || ''}</td>
          <td>${item.size || ''}</td>
          <td class="status-${(item.status || 'available').toLowerCase().replace(/\s+/g, '-')}">${item.status || 'Available'}</td>
        </tr>
      `).join('')}
    </tbody>
  `;
  
  container.appendChild(table);
}
EOF

echo "✅ Created Gantt chart implementation with CSS and JavaScript"

# See if the route was added properly to app.py
grep -q "def test_gantt():" backend/app.py
if [ $? -eq 0 ]; then
  echo "✅ Route was added properly to app.py"
else
  echo "⚠️ The route may not have been added correctly to app.py"
  echo "Please add this manually to backend/app.py before if __name__ == \"__main__\":" 
  echo "@app.route('/test/gantt')"
  echo "def test_gantt():"
  echo "    return render_template('test/gantt.html')"
fi

echo "🔹 Restart your Flask server with: python3 backend/app.py"
echo "🔹 Then visit: http://127.0.0.1:5000/test/gantt"
